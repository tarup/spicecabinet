# Customize this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command
fastlane_require 'dotenv'

default_platform(:android)

@@applications = [
  'redpepper',
  'ginger',
  'vanilla'
]

platform :android do
  before_all do
    Dotenv.load '.env.secret'
  end

  lane :test do
    puts "APPLICATION #{ENV['API_TOKEN_HOCKEY']}"
  end

# ----------------------------------------------------------
# Initializing

# Initialize all metadata whenever needed using: init_metadata_all

# Initialize new application metadata with supply using:
#   init_metadata --env 'app name'

  desc "Initialize metadata for all"
  lane :init_metadata_all do
    @@applications.each do |app_name|
      init_metadata(env: app_name)
    end
  end

  desc "Initialize metadata for a specific app"
  lane :init_metadata do |options|
      Dotenv.overload ".env.#{options[:env]}"

      sh("fastlane supply init --metadata_path ./metadata/#{ENV['APP_NAME']} --package_name #{ENV['PACKAGE']}")
  end

# ----------------------------------------------------------
# Build lanes

# Build all applications using: build_all
# Build a specific application using: buid --env 'app name'
# Define release version with: release:true

  desc "Build all release versions"
  lane :build_all do |options|
    isRelease = options[:release] == true
    @@applications.each do |app_name|
      build(env: app_name, release: isRelease)
    end
  end

  desc "Build application"
  lane :build do |options|
    Dotenv.overload ".env.#{options[:env]}"
    scheme = (options[:release] ? "Release" : "Debug")

    gradle(
      task: "assemble",
      flavor: "#{ENV['FLAVOR_NAME']}",
      build_type: scheme
    )
  end

  desc "Clean outputs"
  lane :clean do
    gradle(task: "clean")
  end

# ----------------------------------------------------------
# HockeyApp lanes

# Upload all applications to HockeyApp using: hockeyapp_all
# Upload specific application to HockeyApp using: hockeyapp --env 'app name'
# Define release version with: release:true

  desc "Upload all applications to HockeyApp"
  lane :hockeyapp_all do |options|
    isRelease = options[:release] == true
    @@applications.each do |app_name|
       hockeyapp(env: app_name, release: isRelease)
    end
  end

# (notify: yes = 1, no = 2 | status: downloadable = 2, disabled = 1)
  desc "Upload application to HockeyApp"
  lane :hockeyapp do |options|
    Dotenv.overload ".env.#{options[:env]}"

    hockey(
      apk: (options[:release] ? "#{ENV['PATH_APK_RELEASE']}"
                              : "#{ENV['PATH_APK_DEBUG']}"),
      api_token: "#{ENV['API_TOKEN_HOCKEY']}",
      dsym: (options[:release] ? "#{ENV['PATH_MAPPING']}" : nil),
      notify: (options[:release] ? "2" : "1"),
      status: (options[:release] ? "1" : "2"),
      notes: File.read("changelog.txt")
    )
  end

# ----------------------------------------------------------
# Google Play lanes

# Upload all release versions to PlayStore (Beta) using: playstore_all
# Upload specific release version to PlayStore (Beta) using:
#   playstore --env 'app name'

  desc "Build all application releases & Deploy to Google Play"
  lane :playstore_all do
    @@applications.each do |app_name|
       playstore(env: app_name)
    end
  end

  desc "Build application release & Deploy Beta to Google Play"
  lane :playstore do |options|
    Dotenv.overload ".env.#{options[:env]}"

    supply(
      track: "beta",
      package_name: "#{ENV['PACKAGE']}",
      metadata_path: "#{ENV['PATH_METADATA']}",
      apk: "#{ENV['PATH_APK_RELEASE']}",
      mapping: "#{ENV['PATH_MAPPING']}"
    )
  end

  desc "Validate changes with Google Play"
  lane :validate do
    supply(
      track: "beta",
      package_name: "#{ENV['PACKAGE']}",
      metadata_path: "#{ENV['PATH_METADATA']}",
      apk: "#{ENV['PATH_APK_RELEASE']}",
      mapping: "#{ENV['PATH_MAPPING']}",
      skip_upload_screenshots: "true",
      skip_upload_images: "true",
      validate_only: "true"
    )
  end

# ----------------------------------------------------------
# Combined deploy lanes

  desc "Build & Deploy single release to HockeyApp + Google Play"
  lane :deploy_release do
    clean()
    build(env: "#{ENV['APP_NAME']}", release:true)
    hockeyapp(env: "#{ENV['APP_NAME']}", release:true)
    playstore(env: "#{ENV['APP_NAME']}")
  end

# ----------------------------------------------------------

  after_all do |lane|
    # This block is called, only if the executed lane was successful
  end

  error do |lane, exception|
    # This block is called when error occured.
  end
end
