# Customize this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
min_fastlane_version("2.70.0")

fastlane_require 'dotenv'

default_platform(:android)

platform :android do
  before_all do
    Dotenv.overload '.env.secret'
  end

  desc "Initialize metadata for a specific app"
  lane :init_metadata do
    sh("fastlane supply init --metadata_path ./metadata/#{ENV['APP_NAME']} --package_name #{ENV['PACKAGE']}")
  end

  desc "Update metadata for a specific app"
  lane :update_metadata do
    sh("fastlane supply --metadata_path ./metadata/#{ENV['APP_NAME']} --package_name #{ENV['PACKAGE']}")
  end

  lane :test do
    puts "APPLICATION #{ENV['APP_NAME']}"
  end

  # ----------------------------------------------------------
  # Build commands

  # Build all release versions using: build_all
  # Build a specific release version using: buid --env 'app name'

  desc "Build all release versions"
  lane :build_all do
    sh "fastlane build --env redpepper"
    sh "fastlane build --env ginger"
    sh "fastlane build --env vanilla"
  end

  desc "Build a release version"
  lane :build do
    gradle(task: "#{ENV['TASK_RELEASE']}")
  end

  # ----------------------------------------------------------
  # HockeyApp commands

  # Build and upload all release versions to HockeyApp using: hockeyapp_all
  # Build and upload specific release version to HockeyApp using: hockeyapp --env 'app name'

  desc "Build, then upload all applications to HockeyApp"
  lane :hockeyapp_all do

    lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]

    sh("fastlane hockeyapp --env redpepper")
    sh("fastlane hockeyapp --env ginger")
    sh("fastlane hockeyapp --env vanilla")
  end

  # Notify users, available for download
  # Lane is called using: hockeyapp --env 'app name' notify:1 status:2
  desc "Build, then upload application to HockeyApp"
  lane :hockeyapp do |options|
    gradle(task: "clean")
    gradle(task: "#{ENV['TASK_RELEASE']}")
    hockey(
      apk: "#{ENV['PATH_APK_RELEASE']}",
      api_token: "#{ENV['API_TOKEN_HOCKEY']}",
      dsym: "#{ENV['PATH_MAPPING']}",
      notify: options[:notify],
      status: options[:status],
      notes: File.read("changelog.txt")
    )
  end

  # ----------------------------------------------------------

#  desc "Submit a new Beta Build to Crashlytics Beta"
#  lane :beta do
#    gradle(task: "assembleRelease")
#    crashlytics

    # sh "your_script.sh"
    # You can also use other beta testing services here
#  end

#  desc "Build release versions & Deploy to Google Play"
#  lane :playstore do
#    gradle(task: "assemble", build_type: "Release")
#    upload_to_play_store
#  end

  # ----------------------------------------------------------
  # Google Play commands

  # Build and upload all release versions to PlayStore using: playstore_all
  # Build and upload specific release version to PlayStore using: playstore --env 'app name'

  desc "Build all application releases & Deploy to Google Play"
  lane :playstore_all do
    sh("fastlane playstore --env redpepper")
    sh("fastlane playstore --env ginger")
    sh("fastlane playstore --env vanilla")
  end

  desc "Build application release & Deploy to Google Play"
  lane :playstore do
    gradle(task: "clean")
    gradle(task: "#{ENV['TASK_RELEASE']}")
    supply(
      package_name: "#{ENV['PACKAGE']}",
      metadata_path: "#{ENV['PATH_METADATA']}",
      apk: "#{ENV['PATH_APK_RELEASE']}",
      mapping: "#{ENV['PATH_MAPPING']}"
    )
  end

  desc "Build application release & Deploy Beta to Google Play"
  lane :playstore_beta do
    gradle(task: "clean")
    gradle(task: "#{ENV['TASK_RELEASE']}")
    supply(
      track: "beta",
      package_name: "#{ENV['PACKAGE']}",
      metadata_path: "#{ENV['PATH_METADATA']}",
      apk: "#{ENV['PATH_APK_RELEASE']}",
      mapping: "#{ENV['PATH_MAPPING']}"
    )
  end

  # ----------------------------------------------------------

#  desc "Deploy a new version to the Google Play"
#  lane :deploy do
#    gradle(task: "assembleRelease")
#    upload_to_play_store
#  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end

# More information about multiple platforms in fastlane: https://docs.fastlane.tools/advanced/#control-configuration-by-lane-and-by-platform
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://docs.fastlane.tools/#metrics
