# Customize this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_require 'dotenv'

default_platform(:android)

@@applications = [
  'redpepper',
  'ginger',
  'vanilla'
]

platform :android do
  before_all do
    Dotenv.overload '.env.secret'
  end

  desc "Initialize metadata for a specific app"
  lane :init_metadata do
    sh("fastlane supply init --metadata_path ./metadata/#{ENV['APP_NAME']} --package_name #{ENV['PACKAGE']}")
  end

  desc "Update metadata for a specific app"
  lane :update_metadata do
    sh("fastlane supply --metadata_path ./metadata/#{ENV['APP_NAME']} --package_name #{ENV['PACKAGE']}")
  end

  lane :test do
    puts "APPLICATION #{ENV['APP_NAME']}"
  end

  desc "Bump up version number"
  lane :version_bump do
    commit_android_version_bump(
      gradle_file_folder:"/Users/tpel/Projects/SpiceCabinet/spice-cabinet"
    )
  end

  # ----------------------------------------------------------
  # Build commands

  # Build all release versions using: build_all
  # Build a specific release version using: buid --env 'app name'

  desc "Build all release versions"
  lane :build_all do |options|
    isRelease = options[:release] == true
    @@applications.each do |app_name|
       sh("fastlane build --env #{app_name} release:#{isRelease}")
    end
  end

  desc "Build application"
  lane :build do |options|
    scheme = (options[:release] ? "Release" : "Debug")
    gradle(
      task: "assemble",
      flavor: "#{ENV['FLAVOR_NAME']}",
      build_type: scheme
    )
  end

  desc "Clean outputs"
  lane :clean do
    gradle(task: "clean")
  end

  # ----------------------------------------------------------
  # HockeyApp commands

  # Build and upload all release versions to HockeyApp using: hockeyapp_all
  # Build and upload specific release version to HockeyApp using: hockeyapp --env 'app name'

  desc "Upload all applications to HockeyApp"
  lane :hockeyapp_all do |options|
    isRelease = options[:release] == true
    @@applications.each do |app_name|
       sh("fastlane hockeyapp --env #{app_name} release:#{isRelease}")
    end
  end

  # Notify users, available for download
  # Lane is called using: hockeyapp --env 'app name' notify:1 status:2
  desc "Upload application to HockeyApp | Release"
  lane :hockeyapp do |options|
    hockey(
      apk: (options[:release] ? "#{ENV['PATH_APK_RELEASE']}"
                              : "#{ENV['PATH_APK_DEBUG']}"),
      api_token: "#{ENV['API_TOKEN_HOCKEY']}",
      dsym: (options[:release] ? "#{ENV['PATH_MAPPING']}"
                              : "#{ENV['PATH_MAPPING']}"),
      notify: (options[:release] ? "2" : "1"),
      status: (options[:release] ? "1" : "2"),
      notes: File.read("changelog.txt")
    )
  end

  lane :hockeyapp_custom do
    isNotified = prompt(text: "#{ENV['PROMPT_NOTIFY']}", boolean: "true")
    isDownloadable = prompt(text: "#{ENV['PROMPT_STATUS']}", boolean: "true")
    hockey(
      apk: "#{ENV['PATH_APK_RELEASE']}",
      api_token: "#{ENV['API_TOKEN_HOCKEY']}",
      dsym: "#{ENV['PATH_MAPPING']}",
      notify: isNotified,
      status: isDownloadable,
      notes: File.read("changelog.txt")
    )
  end

  # ----------------------------------------------------------
  # Google Play commands

  # Build and upload all release versions to PlayStore using: playstore_all
  # Build and upload specific release version to PlayStore using: playstore --env 'app name'

  desc "Build all application releases & Deploy to Google Play"
  lane :playstore_all do
    @@applications.each do |app_name|
       sh("fastlane hockeyapp --env #{app_name}")
    end
  end

  desc "Build application release & Deploy Beta to Google Play"
  lane :playstore do
    supply(
      track: "beta",
      package_name: "#{ENV['PACKAGE']}",
      metadata_path: "#{ENV['PATH_METADATA']}",
      apk: "#{ENV['PATH_APK_RELEASE']}",
      mapping: "#{ENV['PATH_MAPPING']}"
    )
  end

  desc "Validate changes with Google Play"
  lane :validate do
    supply(
      track: "beta",
      package_name: "#{ENV['PACKAGE']}",
      metadata_path: "#{ENV['PATH_METADATA']}",
      apk: "#{ENV['PATH_APK_RELEASE']}",
      mapping: "#{ENV['PATH_MAPPING']}",
      skip_upload_screenshots: "true",
      skip_upload_images: "true",
      validate_only: "true"
    )
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
